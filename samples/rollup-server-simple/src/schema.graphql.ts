// #sha384: xuioPOEDyVAS0btIobF6Mf5AxknFdxFnAM9mjl9h9mKQpoqlmcVn6qHmHDl855ve
// #body: @the-gear/sample-rollup-server-simple/src/schema.graphql

/******************************==~~^^^^^^ W A R N I N G !! ^^^^^^~~==******************************/
/*                                   THIS IS AUTOGENERATED FILE                                   */
/*                                                                                                */
/* Do not edit this file. If you need to do any changes, edit GraphQL source instead:             */
/* @the-gear/sample-rollup-server-simple/src/schema.graphql                                       */
/*                                                                                                */
/*********************************=______________________________=*********************************/

import { parse } from 'graphql/language/parser';
import { Source } from 'graphql/language/source';
import { GraphQLObjectType } from 'graphql';
import { buildASTSchema } from 'graphql/utilities/buildASTSchema';
export const sha384Hash: string =
  'xuioPOEDyVAS0btIobF6Mf5AxknFdxFnAM9mjl9h9mKQpoqlmcVn6qHmHDl855ve';

/*********************************** THIS IS AUTOGENERATED FILE ***********************************/

export const src: string = `"""
Root query type 3
"""
type Query {
  """
  Say hello! 2
  """
  hello: String!
}

schema {
  query: Query
}
`;

/*********************************** THIS IS AUTOGENERATED FILE ***********************************/

export const source: import('graphql').Source = /*@__PURE__*/ new Source(
  src,
  '@the-gear/sample-rollup-server-simple/src/schema.graphql',
);

/*********************************** THIS IS AUTOGENERATED FILE ***********************************/

export const documentNode = /*@__PURE__*/ parse(source, {
  experimentalFragmentVariables: true,
  experimentalVariableDefinitionDirectives: true,
});

/*********************************** THIS IS AUTOGENERATED FILE ***********************************/

export const documentAst: import('graphql').DocumentNode = {
  kind: 'Document',
  definitions: [
    {
      kind: 'ObjectTypeDefinition',
      description: { kind: 'StringValue', value: 'Root query type 3', block: true },
      name: { kind: 'Name', value: 'Query' },
      interfaces: [],
      directives: [],
      fields: [
        {
          kind: 'FieldDefinition',
          description: { kind: 'StringValue', value: 'Say hello! 2', block: true },
          name: { kind: 'Name', value: 'hello' },
          arguments: [],
          type: {
            kind: 'NonNullType',
            type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
          },
          directives: [],
        },
      ],
    },
    {
      kind: 'SchemaDefinition',
      directives: [],
      operationTypes: [
        {
          kind: 'OperationTypeDefinition',
          operation: 'query',
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Query' } },
        },
      ],
    },
  ],
};

/*********************************** THIS IS AUTOGENERATED FILE ***********************************/

/**
 *
 */
export type QueryType = GraphQLObjectType<any, any, any>;

/**
 * Type config for object Query
 *
 * Root query type 3
 */
export function createQueryType(): GraphQLObjectType {
  return new GraphQLObjectType({
    name: 'Query',
    description: 'Root query type 3',
    // interfaces?: GraphQLInterfacesThunk | Array<GraphQLInterfaceType>;
  });
}

export const schema = /*@__PURE__*/ buildASTSchema(documentAst);
export default schema;
